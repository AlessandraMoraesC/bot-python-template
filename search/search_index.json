{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Dependencies This project assumes that you have Python as well as pip installed. Cookiecutter Here is how to install cookiecutter: python3 -m pip install --upgrade cookiecutter","title":"Home"},{"location":"index.html#dependencies","text":"This project assumes that you have Python as well as pip installed.","title":"Dependencies"},{"location":"index.html#cookiecutter","text":"Here is how to install cookiecutter: python3 -m pip install --upgrade cookiecutter","title":"Cookiecutter"},{"location":"building.html","text":"Building the Package Since the bot is a python package, it is recommended to generate a source distribution. For that we provide build scripts ( build.bat and build.bat ) which just do the following: python setup.py sdist This process will generate a dist folder with the compressed project source code. Installing After that is done you can install the package generated with: pip install dist/botPython-1.0.tar.gz # or .zip if running on Windows Or simply using the following command: pip install . Tip If you are using the BotCity Maestro server, the BotRunner will take care of installing your package into a virtual environment for execution in your automation machine. All you need to do is use the BotCLI command line interface to deploy and release your package. # For deploy: botCLI bot deploy -botId \"botPython\" -version 1 .0 -file \"./dist/botPython-1.0.tar.gz\" -python # For update of an existing version file: botCLI bot update -botId \"botPython\" -version 1 .0 -file \"./dist/botPython-1.0.tar.gz\" -python # For release: botCLI bot release -botId \"botPython\" -version 1 .0","title":"Building the Package"},{"location":"building.html#building-the-package","text":"Since the bot is a python package, it is recommended to generate a source distribution. For that we provide build scripts ( build.bat and build.bat ) which just do the following: python setup.py sdist This process will generate a dist folder with the compressed project source code.","title":"Building the Package"},{"location":"building.html#installing","text":"After that is done you can install the package generated with: pip install dist/botPython-1.0.tar.gz # or .zip if running on Windows Or simply using the following command: pip install . Tip If you are using the BotCity Maestro server, the BotRunner will take care of installing your package into a virtual environment for execution in your automation machine. All you need to do is use the BotCLI command line interface to deploy and release your package. # For deploy: botCLI bot deploy -botId \"botPython\" -version 1 .0 -file \"./dist/botPython-1.0.tar.gz\" -python # For update of an existing version file: botCLI bot update -botId \"botPython\" -version 1 .0 -file \"./dist/botPython-1.0.tar.gz\" -python # For release: botCLI bot release -botId \"botPython\" -version 1 .0","title":"Installing"},{"location":"creating.html","text":"Creating a new Project using Cookiecutter cookiecutter https://github.com/botcity-dev/bot-python-template When running this command you will be prompted for the following information: Warning bot_id value must match the Bot label configured on BotMaestro if using the integration. project_type : This will define which bot template is generated. The options are Desktop or Web. Select Web if your automation involve only websites otherwise pick Desktop. bot_id : This will be the name of your Python module. project_name : This is the name of the project. You can pick any name you would like. project_short_description : This is a short description of the bot. Over the next chapter we will explore the package and guide you on the most common operations to be executed.","title":"Creating a Bot"},{"location":"creating.html#creating-a-new-project-using-cookiecutter","text":"cookiecutter https://github.com/botcity-dev/bot-python-template When running this command you will be prompted for the following information: Warning bot_id value must match the Bot label configured on BotMaestro if using the integration. project_type : This will define which bot template is generated. The options are Desktop or Web. Select Web if your automation involve only websites otherwise pick Desktop. bot_id : This will be the name of your Python module. project_name : This is the name of the project. You can pick any name you would like. project_short_description : This is a short description of the bot. Over the next chapter we will explore the package and guide you on the most common operations to be executed.","title":"Creating a new Project using Cookiecutter"},{"location":"next.html","text":"Next Steps Congratulations! By now you should have created your first bot and executed it a couple of times. If you do have questions or suggestions feel free to reach out via one of the following channels: BotCity Community BotCity Core Framework - Python BotCity Web Framework - Python BotCity Template Project - Python Have fun automating!","title":"Next Steps"},{"location":"next.html#next-steps","text":"Congratulations! By now you should have created your first bot and executed it a couple of times. If you do have questions or suggestions feel free to reach out via one of the following channels: BotCity Community BotCity Core Framework - Python BotCity Web Framework - Python BotCity Template Project - Python Have fun automating!","title":"Next Steps"},{"location":"project.html","text":"Exploring the project If you execute the cookiecutter command above and select the default values, you will end up with the following structure: botPython \u251c\u2500\u2500 MANIFEST.in <- This file defines the content of the package such as images. \u251c\u2500\u2500 README.md <- Simple README file for your bot project. \u251c\u2500\u2500 VERSION <- This file defines the Bot package version. \u251c\u2500\u2500 botPython <- Main module for your Bot package. \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py <- Entrypoint for the module. You don't need to bother with this file. \u2502 \u251c\u2500\u2500 bot.py <- Module for your bot code. Here is where you will develop your bot. \u2502 \u2514\u2500\u2500 resources <- Folder containing resources useful for the Bot. \u251c\u2500\u2500 build.bat <- Batch script to generate the package \u251c\u2500\u2500 build.sh <- Shell script to generate the package \u251c\u2500\u2500 requirements.txt <- File describing the python dependencies for your Bot. \u2514\u2500\u2500 setup.py <- Setup file for the package. The main files to be modified are: bot.py : Change this file and add here the code for your bot. resources : Add into this folder files to be used with your bot such as images, spreadsheets and etc. VERSION : Change the content of this file when updating the version of your bot. It is recommended to use versions in the format X.Y. E.g. 1.0, 1.1, 2.5, 3.10. Resources By default this project is configured to add into the package all files and subfolders that are added under the resources folder. The bot base class offers an utility method to handle files taking into consideration the package path. Please refer to the BotCity Framework documentation under the Bot API for the get_resource_abspath method. Here is an example: class Bot ( DesktopBot ): def action ( self , execution ): # Add the resource start.png. # Note the self.get_resource_abspath call to handle # the package path self . add_image ( \"start\" , self . get_resource_abspath ( \"start.png\" )) Warning If adding new resource folders parallel to the existing resources folder, make sure to change the MANIFEST.in file and also add the folder name under package_data at setup.py . Bot Code This template project contains a skeleton class under bot.py with an initial example which opens up the browser with the BotCity website. Depending on your selection of the Project Type, the template will either use as base class the DesktopBot or WebBot . In both cases, the base class contains all the functions of the BotCity Python Core Framework as methods so please keep in mind to use self. when invoking the methods. Example of a Desktop Bot skeleton: class Bot ( DesktopBot ): def action ( self , execution ): # using browse from browser module self . browse ( ... ) # using find from display module self . find ( ... ) # using mouse_move from mouse module self . mouse_move ( x = 100 , y = 200 ) # using enter from keyboard module self . enter () Example of a Web Bot skeleton: class Bot ( WebBot ): def action ( self , execution ): # Configure whether or not to run on headless mode self . headless = False # using browse from browser module self . browse ( ... ) # using find from display module self . find ( ... ) # using mouse_move from mouse module self . mouse_move ( x = 100 , y = 200 ) # using enter from keyboard module self . enter () # Stop the browser and clean up self . stop_browser () Warning In case you use a different module for your main bot (instead of the default bot.py ), make sure to change the __main__.py file to load the proper module.","title":"Exploring the Project"},{"location":"project.html#exploring-the-project","text":"If you execute the cookiecutter command above and select the default values, you will end up with the following structure: botPython \u251c\u2500\u2500 MANIFEST.in <- This file defines the content of the package such as images. \u251c\u2500\u2500 README.md <- Simple README file for your bot project. \u251c\u2500\u2500 VERSION <- This file defines the Bot package version. \u251c\u2500\u2500 botPython <- Main module for your Bot package. \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 __main__.py <- Entrypoint for the module. You don't need to bother with this file. \u2502 \u251c\u2500\u2500 bot.py <- Module for your bot code. Here is where you will develop your bot. \u2502 \u2514\u2500\u2500 resources <- Folder containing resources useful for the Bot. \u251c\u2500\u2500 build.bat <- Batch script to generate the package \u251c\u2500\u2500 build.sh <- Shell script to generate the package \u251c\u2500\u2500 requirements.txt <- File describing the python dependencies for your Bot. \u2514\u2500\u2500 setup.py <- Setup file for the package. The main files to be modified are: bot.py : Change this file and add here the code for your bot. resources : Add into this folder files to be used with your bot such as images, spreadsheets and etc. VERSION : Change the content of this file when updating the version of your bot. It is recommended to use versions in the format X.Y. E.g. 1.0, 1.1, 2.5, 3.10.","title":"Exploring the project"},{"location":"project.html#resources","text":"By default this project is configured to add into the package all files and subfolders that are added under the resources folder. The bot base class offers an utility method to handle files taking into consideration the package path. Please refer to the BotCity Framework documentation under the Bot API for the get_resource_abspath method. Here is an example: class Bot ( DesktopBot ): def action ( self , execution ): # Add the resource start.png. # Note the self.get_resource_abspath call to handle # the package path self . add_image ( \"start\" , self . get_resource_abspath ( \"start.png\" )) Warning If adding new resource folders parallel to the existing resources folder, make sure to change the MANIFEST.in file and also add the folder name under package_data at setup.py .","title":"Resources"},{"location":"project.html#bot-code","text":"This template project contains a skeleton class under bot.py with an initial example which opens up the browser with the BotCity website. Depending on your selection of the Project Type, the template will either use as base class the DesktopBot or WebBot . In both cases, the base class contains all the functions of the BotCity Python Core Framework as methods so please keep in mind to use self. when invoking the methods.","title":"Bot Code"},{"location":"project.html#example-of-a-desktop-bot-skeleton","text":"class Bot ( DesktopBot ): def action ( self , execution ): # using browse from browser module self . browse ( ... ) # using find from display module self . find ( ... ) # using mouse_move from mouse module self . mouse_move ( x = 100 , y = 200 ) # using enter from keyboard module self . enter ()","title":"Example of a Desktop Bot skeleton:"},{"location":"project.html#example-of-a-web-bot-skeleton","text":"class Bot ( WebBot ): def action ( self , execution ): # Configure whether or not to run on headless mode self . headless = False # using browse from browser module self . browse ( ... ) # using find from display module self . find ( ... ) # using mouse_move from mouse module self . mouse_move ( x = 100 , y = 200 ) # using enter from keyboard module self . enter () # Stop the browser and clean up self . stop_browser () Warning In case you use a different module for your main bot (instead of the default bot.py ), make sure to change the __main__.py file to load the proper module.","title":"Example of a Web Bot skeleton:"},{"location":"running.html","text":"Running Your Code This chapter will cover a couple different ways in which you can run your code for testing and production. Direct execution via IDE or Command Line The bot.py file inside of the package has special code which invokes the main method on the bot class. This allow for direct execution of the bot via your favorite IDE or the command line. if __name__ == '__main__' : Bot . main () Here is how to start the code via the command line. python bot.py Using the Module Entry Point The package has a module entry point __main__.py which imports the bot.py module and dynamically identify the Bot class for execution. To start your bot via the entry point do: # Assuming your bot_id used during creation of the package # is botPython. Adjust as needed for your case. python -m botPython Note This is the method used by the BotCity BotRunner when using the Bot Maestro orchestration.","title":"Running your Code"},{"location":"running.html#running-your-code","text":"This chapter will cover a couple different ways in which you can run your code for testing and production.","title":"Running Your Code"},{"location":"running.html#direct-execution-via-ide-or-command-line","text":"The bot.py file inside of the package has special code which invokes the main method on the bot class. This allow for direct execution of the bot via your favorite IDE or the command line. if __name__ == '__main__' : Bot . main () Here is how to start the code via the command line. python bot.py","title":"Direct execution via IDE or Command Line"},{"location":"running.html#using-the-module-entry-point","text":"The package has a module entry point __main__.py which imports the bot.py module and dynamically identify the Bot class for execution. To start your bot via the entry point do: # Assuming your bot_id used during creation of the package # is botPython. Adjust as needed for your case. python -m botPython Note This is the method used by the BotCity BotRunner when using the Bot Maestro orchestration.","title":"Using the Module Entry Point"}]}